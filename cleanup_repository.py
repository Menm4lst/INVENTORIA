"""
Script para analizar y limpiar el repositorio del Homologador.
Identifica archivos innecesarios y los elimina para optimizar el proyecto.
"""

import os
import shutil
from pathlib import Path

def analyze_repository():
    """Analiza el repositorio actual y categoriza los archivos."""
    
    base_dir = Path("c:/Users/Antware/OneDrive/Desktop/PROYECTOS DEV/APP HOMOLOGACIONES")
    
    # üìÅ ARCHIVOS PRINCIPALES (MANTENER)
    essential_files = {
        # Core de la aplicaci√≥n
        "homologador/app.py": "‚úÖ Entrada principal de la aplicaci√≥n",
        "homologador/__init__.py": "‚úÖ M√≥dulo Python",
        
        # UI Principal
        "homologador/ui/__init__.py": "‚úÖ M√≥dulo UI",
        "homologador/ui/main_window.py": "‚úÖ Ventana principal con dashboard",
        "homologador/ui/final_login.py": "‚úÖ Ventana de login actual",
        "homologador/ui/details_view.py": "‚úÖ Vista de detalles (corregida)",
        "homologador/ui/homologation_form.py": "‚úÖ Formulario de homologaciones",
        "homologador/ui/theme.py": "‚úÖ Sistema de tema oscuro",
        "homologador/ui/notifications.py": "‚úÖ Sistema de notificaciones",
        "homologador/ui/dashboard_advanced.py": "‚úÖ Dashboard avanzado integrado",
        "homologador/ui/icons.py": "‚úÖ Manejo de iconos",
        
        # Core del sistema
        "homologador/core/__init__.py": "‚úÖ M√≥dulo core",
        "homologador/core/storage.py": "‚úÖ Manejo de base de datos",
        "homologador/core/settings.py": "‚úÖ Configuraciones",
        "homologador/core/export.py": "‚úÖ Exportaci√≥n de datos",
        "homologador/core/audit.py": "‚úÖ Sistema de auditor√≠a",
        "homologador/core/optimization.py": "‚úÖ Optimizaciones",
        
        # Data
        "homologador/data/__init__.py": "‚úÖ M√≥dulo data",
        "homologador/data/seed.py": "‚úÖ Datos iniciales y autenticaci√≥n",
        "homologador/data/schema.sql": "‚úÖ Esquema de base de datos",
        
        # Configuraci√≥n
        "requirements.txt": "‚úÖ Dependencias del proyecto",
        "README.md": "‚úÖ Documentaci√≥n"
    }
    
    # üóëÔ∏è ARCHIVOS PARA ELIMINAR
    files_to_delete = {
        # Cache y archivos temporales
        "__pycache__/": "‚ùå Cache de Python",
        "homologador/__pycache__/": "‚ùå Cache",
        "homologador/ui/__pycache__/": "‚ùå Cache",
        "homologador/core/__pycache__/": "‚ùå Cache",
        "homologador/data/__pycache__/": "‚ùå Cache",
        "tests/__pycache__/": "‚ùå Cache de tests",
        "tests/unit/__pycache__/": "‚ùå Cache de tests",
        
        # Builds y distribuciones
        "build/": "‚ùå Archivos de build de PyInstaller",
        "dist/": "‚ùå Ejecutables compilados",
        "scripts/": "‚ùå Scripts de build obsoletos",
        
        # Paquetes y deployment obsoletos
        "Paquete_Homologador_Autocontenido/": "‚ùå Paquete obsoleto",
        "Paquete_Homologador_OneDrive/": "‚ùå Paquete obsoleto",
        "deployment/": "‚ùå Deployment obsoleto",
        
        # Tests (muchos obsoletos)
        "tests/": "‚ùå Tests obsoletos y fragmentados",
        
        # Archivos de UI obsoletos/duplicados
        "homologador/ui/login_window.py": "‚ùå Login obsoleto (usamos final_login.py)",
        "homologador/ui/simple_login.py": "‚ùå Login simple obsoleto",
        "homologador/ui/ultra_simple_login.py": "‚ùå Login ultra simple obsoleto", 
        "homologador/ui/white_black_login.py": "‚ùå Login de prueba obsoleto",
        "homologador/ui/simple_theme.py": "‚ùå Tema simple obsoleto",
        "homologador/ui/theme_effects.py": "‚ùå Efectos de tema no usados",
        "homologador/ui/main_window_temp.py": "‚ùå Ventana temporal obsoleta",
        "homologador/ui/homologation_form_fix.py": "‚ùå Fix obsoleto",
        "homologador/ui/autosave_manager.py": "‚ùå Autosave no implementado",
        
        # Archivos de prueba y temporales
        "simple_test_window.py": "‚ùå Ventana de prueba",
        "homologador/test_simple.py": "‚ùå Test simple obsoleto",
        "homologador/test_funcionalidades.py": "‚ùå Test funcionalidades obsoleto",
        "aplicar_tema_oscuro_global.py": "‚ùå Script temporal (ya aplicado)",
        
        # Logs
        "homologador.log": "‚ùå Log temporal",
        "homologador/homologador.log": "‚ùå Log temporal",
        "coverage.xml": "‚ùå Reporte de cobertura",
        
        # Duplicados
        "homologador/requirements.txt": "‚ùå Duplicado (tenemos el principal)",
        "homologador/README.md": "‚ùå Duplicado (tenemos el principal)",
        "homologador/config.json": "‚ùå Config no usado"
    }
    
    return essential_files, files_to_delete

def clean_repository():
    """Elimina archivos innecesarios del repositorio."""
    
    base_dir = Path("c:/Users/Antware/OneDrive/Desktop/PROYECTOS DEV/APP HOMOLOGACIONES")
    essential_files, files_to_delete = analyze_repository()
    
    print("üßπ LIMPIEZA DEL REPOSITORIO HOMOLOGADOR")
    print("=" * 50)
    
    deleted_count = 0
    total_size_saved = 0
    
    for file_path, reason in files_to_delete.items():
        full_path = base_dir / file_path
        
        try:
            if full_path.exists():
                if full_path.is_dir():
                    # Calcular tama√±o del directorio
                    size = sum(f.stat().st_size for f in full_path.rglob('*') if f.is_file())
                    shutil.rmtree(full_path)
                    print(f"üìÅ Eliminado directorio: {file_path} ({size//1024}KB) - {reason}")
                else:
                    size = full_path.stat().st_size
                    full_path.unlink()
                    print(f"üìÑ Eliminado archivo: {file_path} ({size//1024}KB) - {reason}")
                
                deleted_count += 1
                total_size_saved += size
                
        except Exception as e:
            print(f"‚ùå Error eliminando {file_path}: {e}")
    
    print(f"\n‚úÖ LIMPIEZA COMPLETADA")
    print(f"üìä Archivos/carpetas eliminados: {deleted_count}")
    print(f"üíæ Espacio liberado: {total_size_saved//1024//1024}MB")
    
    # Mostrar archivos esenciales que se mantuvieron
    print(f"\nüìã ARCHIVOS PRINCIPALES MANTENIDOS:")
    for file_path, description in essential_files.items():
        full_path = base_dir / file_path
        if full_path.exists():
            print(f"   {description}: {file_path}")
        else:
            print(f"   ‚ö†Ô∏è FALTA: {file_path}")

if __name__ == "__main__":
    clean_repository()